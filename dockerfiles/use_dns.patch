diff --git a/cp/main.c b/cp/main.c
index 5f2539c..fc98a98 100644
--- a/cp/main.c
+++ b/cp/main.c
@@ -26,6 +26,9 @@
 #include <ctype.h>
 #include <pcap.h>
 #include <signal.h>
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <netdb.h>
 
 #include <rte_memory.h>
 #include <rte_memzone.h>
@@ -88,8 +91,19 @@ struct cp_params cp_params;
 static void
 parse_arg_ip(const char *optarg, struct in_addr *addr)
 {
-	if (!inet_aton(optarg, addr))
-		rte_panic("Invalid argument - %s - Exiting.\n", optarg);
+        int ret;
+        struct addrinfo hints, *servinfo;
+        memset(&hints, 0, sizeof hints);
+        hints.ai_family = AF_INET;
+        while ((ret = getaddrinfo(optarg, NULL, &hints, &servinfo)) != 0) {
+                int sec = 5;
+                fprintf(stderr, "Unable to resolve %s. Retrying in %d sec\n",
+                            optarg, sec);
+                sleep(sec);
+        }
+        struct sockaddr_in *h = (struct sockaddr_in *) servinfo->ai_addr;
+        memcpy(addr, &h->sin_addr, sizeof(struct in_addr));
+        freeaddrinfo(servinfo);
 }
 
 /**
diff --git a/dp/config.c b/dp/config.c
index 919daa8..91411d0 100644
--- a/dp/config.c
+++ b/dp/config.c
@@ -23,10 +23,32 @@
 
 #include "main.h"
 #include "pipeline/epc_packet_framework.h"
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <netdb.h>
+#include <unistd.h>
 
 /* app config structure */
 struct app_params app;
 
+static void
+parse_arg_ip(const char *optarg, struct in_addr *addr)
+{
+        int ret;
+        struct addrinfo hints, *servinfo;
+        memset(&hints, 0, sizeof hints);
+        hints.ai_family = AF_INET;
+        while ((ret = getaddrinfo(optarg, NULL, &hints, &servinfo)) != 0) {
+                int sec = 5;
+                fprintf(stderr, "Unable to resolve %s. Retrying in %d sec\n",
+                            optarg, sec);
+                sleep(sec);
+        }
+        struct sockaddr_in *h = (struct sockaddr_in *) servinfo->ai_addr;
+        memcpy(addr, &h->sin_addr, sizeof(struct in_addr));
+        freeaddrinfo(servinfo);
+ }
+
 /* prints the usage statement and quits with an error message */
 static inline void dp_print_usage(void)
 {
@@ -321,13 +343,8 @@ parse_config_args(struct app_params *app, int argc, char **argv)
 			break;
 			/* sgi_gw_ip address */
 		case 'x':
-			if (!inet_aton(optarg, (struct in_addr *)&app->sgi_gw_ip)) {
-				printf("Invalid sgi gateway ip ->%s<-\n",
-						optarg);
-				dp_print_usage();
-				app->sgi_gw_ip = 0;
-				return -1;
-			}
+
+			parse_arg_ip(optarg, (struct in_addr *)&app->sgi_gw_ip);
 			printf("Parsed sgi gw ip: %s\n",
 					inet_ntoa(*((struct in_addr *)&app->sgi_gw_ip)));
 			break;
diff --git a/interface/interface.c b/interface/interface.c
index 96a612e..3d9c91d 100644
--- a/interface/interface.c
+++ b/interface/interface.c
@@ -18,6 +18,9 @@
 #include <arpa/inet.h>
 #include <sys/ipc.h>
 #include <sys/msg.h>
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <netdb.h>
 #include <stdio.h>
 #include <time.h>
 #include <string.h>
@@ -379,14 +382,33 @@ zmq_destroy(void)
 #endif /* !CP_BUILD*/
 
 #define IFACE_FILE "../config/interface.cfg"
-#define SET_CONFIG_IP(ip, file, section, entry) \
-	do {\
-		entry = rte_cfgfile_get_entry(file, section, #ip);\
-		if (entry == NULL)\
-			rte_panic("%s not found in %s", #ip, IFACE_FILE);\
-		if (inet_aton(entry, &ip) == 0)\
-			rte_panic("Invalid %s in %s", #ip, IFACE_FILE);\
-	} while (0)
+#define RTE_LOGTYPE_CPDP        RTE_LOGTYPE_USER1
+
+static void
+set_config_ip(struct in_addr *ip, const char *string,
+                struct rte_cfgfile *file, const char *section)
+{
+        const char *entry = rte_cfgfile_get_entry(file, section, string);
+        if (entry == NULL)
+        rte_panic("%s not found in %s", string, IFACE_FILE);
+
+        int ret;
+        struct addrinfo hints, *servinfo;
+        memset(&hints, 0, sizeof hints);
+        hints.ai_family = AF_INET;
+        while ((ret = getaddrinfo(entry, NULL, &hints, &servinfo)) != 0) {
+                int sec = 5;
+                RTE_LOG(NOTICE, CPDP, "Unable to resolve %s. Retrying in %d sec\n",
+                            entry, sec);
+                sleep(sec);
+        }
+        struct sockaddr_in *h = (struct sockaddr_in *) servinfo->ai_addr;
+        memcpy(ip, &h->sin_addr, sizeof(struct in_addr));
+        freeaddrinfo(servinfo);
+}
+
+#define SET_CONFIG_IP(ip, file, section) set_config_ip(&ip, #ip, file, section)
+
 #define SET_CONFIG_PORT(port, file, section, entry) \
 	do {\
 		entry = rte_cfgfile_get_entry(file, section, #port);\
@@ -405,10 +427,10 @@ static void read_interface_config(void)
 		rte_exit(EXIT_FAILURE, "Cannot load configuration profile %s\n",
 				IFACE_FILE);
 
-	SET_CONFIG_IP(dp_comm_ip, file, "0", file_entry);
+	SET_CONFIG_IP(dp_comm_ip, file, "0");
 	SET_CONFIG_PORT(dp_comm_port, file, "0", file_entry);
 
-	SET_CONFIG_IP(cp_comm_ip, file, "0", file_entry);
+	SET_CONFIG_IP(cp_comm_ip, file, "0");
 	SET_CONFIG_PORT(cp_comm_port, file, "0", file_entry);
 
 #ifdef SDN_ODL_BUILD
@@ -418,16 +440,16 @@ static void read_interface_config(void)
 	uint16_t zmq_sub_port;
 	uint16_t zmq_pub_port;
 
-	SET_CONFIG_IP(fpc_ip, file, "0", file_entry);
+	SET_CONFIG_IP(fpc_ip, file, "0");
 	SET_CONFIG_PORT(fpc_port, file, "0", file_entry);
 
-	SET_CONFIG_IP(cp_nb_server_ip, file, "0", file_entry);
+	SET_CONFIG_IP(cp_nb_server_ip, file, "0");
 	SET_CONFIG_PORT(cp_nb_server_port, file, "0", file_entry);
 
-	SET_CONFIG_IP(zmq_sub_ip, file, "0", file_entry);
+	SET_CONFIG_IP(zmq_sub_ip, file, "0");
 	SET_CONFIG_PORT(zmq_sub_port, file, "0", file_entry);
 
-	SET_CONFIG_IP(zmq_pub_ip, file, "0", file_entry);
+	SET_CONFIG_IP(zmq_pub_ip, file, "0");
 	SET_CONFIG_PORT(zmq_pub_port, file, "0", file_entry);
 
 	snprintf(zmq_sub_ifconnect, sizeof(zmq_sub_ifconnect),
@@ -449,7 +471,10 @@ void iface_module_constructor(void)
 	 * dp*/
 	read_interface_config();
 #ifdef CP_BUILD
-	printf("IFACE: CP Initialization\n");
+        int sec = 10;
+        RTE_LOG(NOTICE, CPDP, "IFACE: CP Initialization\n");
+        RTE_LOG(NOTICE, CPDP, "IFACE: Wait %d sec for DP to be ready\n", sec);
+        sleep(sec);
 #if defined SDN_ODL_BUILD
 	register_comm_msg_cb(COMM_SOCKET,
 				sdnODL_init,
